{"version":3,"sources":["components/HeaderBreadcrumbs.js","components/_dashboard/infoTirage/InfoTirageNewForm.js","pages/dashboard/InfoTirageCreate.js"],"names":["HeaderBreadcrumbs","_ref","links","action","heading","moreLink","sx","other","_jsxs","Box","mb","children","display","alignItems","flexGrow","_jsx","Typography","variant","gutterBottom","MBreadcrumbs","flexShrink","mt","isString","Link","href","target","map","noWrap","InfoTirageNewForm","isEdit","currentInfoTirage","navigate","useNavigate","dispatch","useDispatch","enqueueSnackbar","useSnackbar","tirageConfs","useSelector","state","user","createDateFromTextValue","value","splitParts","split","Date","NewInfoTirageSchema","Yup","shape","tirage_id","min","max","required","startTime","nullable","endTime","formik","useFormik","enableReinitialize","initialValues","start_time","end_time","block","infoTirageId","id","validationSchema","onSubmit","async","values","_ref2","setSubmitting","resetForm","setErrors","body","fTime","_PATH_DASHBOARD$tirag","Request","handleModifyInfoTirage","handleAddInfoTirage","getInfoTirages","PATH_DASHBOARD","tirage","info_tirage","error","message","alert","JSON","stringify","useEffect","getTirageConfs","errors","touched","handleSubmit","isSubmitting","setFieldValue","getFieldProps","FormikProvider","Form","noValidate","autoComplete","Grid","container","spacing","item","xs","md","Card","p","Stack","sm","direction","TextField","select","fullWidth","label","placeholder","SelectProps","native","Boolean","name","option","TimePicker","ampm","inputFormat","onChange","renderInput","params","FormHelperText","px","FormControlLabel","control","Switch","checked","color","labelPlacement","justifyContent","LoadingButton","type","loading","InfoTirageCreate","themeStretch","useSettings","pathname","useLocation","useParams","infotirages","includes","find","inf","Number","Page","title","Container","maxWidth","root"],"mappings":"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","file":"static/js/56.d3d4a93b.chunk.js","sourcesContent":["import { isString } from 'lodash';\nimport PropTypes from 'prop-types';\n// material\nimport { Box, Typography, Link } from '@mui/material';\n//\nimport { MBreadcrumbs } from './@material-extend';\n\n// ----------------------------------------------------------------------\n\nHeaderBreadcrumbs.propTypes = {\n  links: PropTypes.array,\n  action: PropTypes.node,\n  heading: PropTypes.string.isRequired,\n  moreLink: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  sx: PropTypes.object\n};\n\nexport default function HeaderBreadcrumbs({ links, action, heading, moreLink = '' || [], sx, ...other }) {\n  return (\n    <Box sx={{ mb: 5, ...sx }}>\n      <Box sx={{ display: 'flex', alignItems: 'center' }}>\n        <Box sx={{ flexGrow: 1 }}>\n          <Typography variant=\"h4\" gutterBottom>\n            {heading}\n          </Typography>\n          <MBreadcrumbs links={links} {...other} />\n        </Box>\n\n        {action && <Box sx={{ flexShrink: 0 }}>{action}</Box>}\n      </Box>\n\n      <Box sx={{ mt: 2 }}>\n        {isString(moreLink) ? (\n          <Link href={moreLink} target=\"_blank\" variant=\"body2\">\n            {moreLink}\n          </Link>\n        ) : (\n          moreLink.map((href) => (\n            <Link noWrap key={href} href={href} variant=\"body2\" target=\"_blank\" sx={{ display: 'table' }}>\n              {href}\n            </Link>\n          ))\n        )}\n      </Box>\n    </Box>\n  );\n}\n","import * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useSnackbar } from 'notistack';\nimport { useNavigate } from 'react-router-dom';\nimport { Form, FormikProvider, useFormik } from 'formik';\n// material\nimport { Box, Card, Grid, Stack, TextField, FormHelperText, FormControlLabel, Switch } from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\nimport { TimePicker } from '@mui/x-date-pickers';\nimport Request from '../../../utils/Request';\n// routes\nimport { PATH_DASHBOARD } from '../../../routes/paths';\n//\nimport { useDispatch, useSelector } from '../../../redux/store';\nimport { getInfoTirages, getTirageConfs } from '../../../redux/slices/user';\nimport { fTime } from '../../../utils/formatTime';\n// ----------------------------------------------------------------------\n\nInfoTirageNewForm.propTypes = {\n  isEdit: PropTypes.bool,\n  currentInfoTirage: PropTypes.object\n};\n\nexport default function InfoTirageNewForm({ isEdit, currentInfoTirage }) {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const { tirageConfs } = useSelector((state) => state.user);\n\n  const createDateFromTextValue = (value) => {\n    if (value != null) {\n      const splitParts = value?.split(':');\n      return new Date(2022, 1, 1, splitParts[0], splitParts[1]);\n    }\n    return null;\n  };\n\n  const TIRAGE = [\n    { id: 'NYM', name: 'New York Midi' },\n    { id: 'NYS', name: 'New York Soir' },\n    { id: 'FLM', name: 'Florida Midi' },\n    { id: 'FLS', name: 'Florida Soir' },\n    { id: 'GGMT', name: 'Georgia Matin' },\n    { id: 'GGMD', name: 'Georgia Soir' },\n    { id: 'GGS', name: 'Georgia Nuit' },\n    { id: 'TXMA', name: 'Texas Matin' },\n    { id: 'TXM', name: 'Texas Midi' },\n    { id: 'TXS', name: 'Texas Soir' },\n    { id: 'CGM', name: 'Chicago Midi' },\n    { id: 'CGS', name: 'Chicago Soir' },\n    { id: 'LCM', name: 'Lave chodyè Matin' },\n    { id: 'LCS', name: 'Lave chodyè Soir' },\n    { id: 'TNM', name: 'Tennessee Matin' },\n    { id: 'TNMD', name: 'Tennessee Midi' },\n    { id: 'TNS', name: 'Tennessee Soir' },\n    { id: 'NJM', name: 'New Jersey Matin' },\n    { id: 'NJMM', name: 'New Jersey Midi' },\n    { id: 'NJS', name: 'New Jersey Soir' },\n    { id: 'ANA', name: 'Anguilla AM (10H)' },\n    { id: 'ANM', name: 'Anguilla Midi' },\n    { id: 'ANS', name: 'Anguilla Soir' },\n    { id: 'ANN', name: 'Anguilla Nuit' },\n    { id: 'RL', name: 'Real' },\n    { id: 'PRM', name: 'Primera Midi' },\n    { id: 'PRS', name: 'Primera Soir' },\n    { id: 'SUA', name: 'Suerte AM' },\n    { id: 'SUS', name: 'Suerte Soir' },\n    { id: 'LK', name: 'Loteka' },\n    { id: 'KL', name: 'King Lottery Noche' },\n    { id: 'NA', name: 'Nacional Midi' },\n    { id: 'NAS', name: 'Nacional Soir' },\n    { id: 'QPL', name: 'Quiniela palé' }\n  ];\n\n  const NewInfoTirageSchema = Yup.object().shape({\n    tirage_id: Yup.string().min(2, 'Too Short!').max(50, 'Too Long!').required('Name is required'),\n    startTime: Yup.string().required('startTime is required').nullable(),\n    endTime: Yup.string().required('endTime is required').nullable()\n  });\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      tirage_id: currentInfoTirage?.tirage_id || null,\n      startTime: createDateFromTextValue(currentInfoTirage?.start_time) || null,\n      endTime: createDateFromTextValue(currentInfoTirage?.end_time) || null,\n      block: currentInfoTirage?.block,\n      infoTirageId: currentInfoTirage?.id\n    },\n    validationSchema: NewInfoTirageSchema,\n    onSubmit: async (values, { setSubmitting, resetForm, setErrors }) => {\n      const body = {\n        ...values,\n        startTime: values?.startTime && fTime(values?.startTime),\n        endTime: values?.endTime && fTime(values?.endTime)\n      };\n      try {\n        if (isEdit) {\n          await Request.handleModifyInfoTirage(body);\n        } else {\n          await Request.handleAddInfoTirage(body);\n        }\n        resetForm();\n        setSubmitting(false);\n        enqueueSnackbar(!isEdit ? 'Créer avec succès' : 'Mettre à jour avec succès', { variant: 'success' });\n        getInfoTirages();\n        navigate(PATH_DASHBOARD.tirage?.info_tirage);\n      } catch (error) {\n        if (error?.message) {\n          enqueueSnackbar(error?.message, { variant: 'error' });\n        } else {\n          alert(JSON.stringify(error));\n        }\n        setSubmitting(false);\n        setErrors(error);\n      }\n    }\n  });\n\n  useEffect(() => {\n    dispatch(getInfoTirages());\n    dispatch(getTirageConfs());\n  }, [dispatch]);\n\n  const { errors, values, touched, handleSubmit, isSubmitting, setFieldValue, getFieldProps } = formik;\n\n  return (\n    <FormikProvider value={formik}>\n      <Form noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={8}>\n            <Card sx={{ p: 3 }}>\n              <Stack spacing={3}>\n                <Stack spacing={{ xs: 2, sm: 3 }} direction={{ xs: 'column', sm: 'row' }}>\n                  <TextField\n                    select\n                    fullWidth\n                    label=\"tirage\"\n                    placeholder=\"Choisir le tirage\"\n                    {...getFieldProps('tirage_id')}\n                    SelectProps={{ native: true }}\n                    error={Boolean(touched.tirage_id && errors.tirage_id)}\n                    // helperText={touched.tirage_id && errors.tirage_id}\n                  >\n                    <option value=\"\" />\n                    {TIRAGE.map((option) => (\n                      <option key={option.id} value={option.id}>\n                        {option.name}\n                      </option>\n                    ))}\n                  </TextField>\n                </Stack>\n                <Stack spacing={1}>\n                  <Stack spacing={{ xs: 2, sm: 3 }} direction={{ xs: 'column', sm: 'row' }}>\n                    <TimePicker\n                      label=\"Ouverture\"\n                      placeholder=\"Entrer l'heure d'ouverture du tirage\"\n                      ampm={false}\n                      inputFormat=\"HH:mm:ss\"\n                      {...getFieldProps('startTime')}\n                      onChange={(startTime) => setFieldValue('startTime', startTime)}\n                      renderInput={(params) => (\n                        <TextField fullWidth {...params} error={Boolean(touched.startTime && errors.startTime)} />\n                      )}\n                    />\n                    <TimePicker\n                      label=\"Fermeture\"\n                      placeholder=\"Entrer l'heure de fermeture du tirage\"\n                      ampm={false}\n                      inputFormat=\"HH:mm:ss\"\n                      {...getFieldProps('endTime')}\n                      onChange={(endTime) => setFieldValue('endTime', endTime)}\n                      renderInput={(params) => (\n                        <TextField fullWidth {...params} error={Boolean(touched.endTime && errors.endTime)} />\n                      )}\n                    />\n                  </Stack>\n\n                  {Boolean(touched.startTime && errors.startTime) && (\n                    <FormHelperText sx={{ px: 2 }} error>\n                      {errors.startTime}\n                    </FormHelperText>\n                  )}\n                  {Boolean(touched.endTime && errors.endTime) && (\n                    <FormHelperText sx={{ px: 2 }} error>\n                      {errors.endTime}\n                    </FormHelperText>\n                  )}\n                </Stack>\n\n                <Stack direction={{ xs: 'column', md: 'row' }} spacing={2}>\n                  <FormControlLabel\n                    control={\n                      <Switch\n                        {...getFieldProps('block')}\n                        checked={values?.block}\n                        color={!values?.block ? 'primary' : 'success'}\n                      />\n                    }\n                    labelPlacement=\"start\"\n                    label=\"Block\"\n                  />\n                </Stack>\n\n                <Box sx={{ mt: 3, display: 'flex', justifyContent: 'flex-end' }}>\n                  <LoadingButton type=\"submit\" variant=\"contained\" loading={isSubmitting}>\n                    {!isEdit ? 'Créer tirage' : 'Sauvegarder les modifications'}\n                  </LoadingButton>\n                </Box>\n              </Stack>\n            </Card>\n          </Grid>\n        </Grid>\n      </Form>\n    </FormikProvider>\n  );\n}\n","import { useEffect } from 'react';\nimport { paramCase } from 'change-case';\nimport { useParams, useLocation } from 'react-router-dom';\n// material\nimport { Container } from '@mui/material';\n// redux\nimport { useDispatch, useSelector } from '../../redux/store';\nimport { getInfoTirages } from '../../redux/slices/user';\n// routes\nimport { PATH_DASHBOARD } from '../../routes/paths';\n// hooks\nimport useSettings from '../../hooks/useSettings';\n// components\nimport Page from '../../components/Page';\nimport HeaderBreadcrumbs from '../../components/HeaderBreadcrumbs';\nimport InfoTirageNewForm from '../../components/_dashboard/infoTirage/InfoTirageNewForm';\n\n// ----------------------------------------------------------------------\n\nexport default function InfoTirageCreate() {\n  const { themeStretch } = useSettings();\n  const dispatch = useDispatch();\n  const { pathname } = useLocation();\n  const { infoTirageId } = useParams();\n  const { infotirages } = useSelector((state) => state.user);\n  const isEdit = pathname.includes('edit');\n  const currentInfoTirage = infotirages.find((inf) => inf?.id === Number(infoTirageId));\n\n  useEffect(() => {\n    dispatch(getInfoTirages());\n  }, [dispatch]);\n\n  return (\n    <Page title=\"Tirage: Créer un nouvel tirage | RLP Center Lotto\">\n      <Container maxWidth={themeStretch ? false : 'lg'}>\n        <HeaderBreadcrumbs\n          heading={!isEdit ? 'Créer un nouvel tirage' : 'Modifier tirage'}\n          links={[\n            { name: 'Dashboard', href: PATH_DASHBOARD.root },\n            { name: 'Tirage', href: PATH_DASHBOARD.tirage?.info_tirage },\n            { name: !isEdit ? 'Nouvel tirage' : 'Modification' }\n          ]}\n        />\n\n        <InfoTirageNewForm isEdit={isEdit} currentInfoTirage={currentInfoTirage} />\n      </Container>\n    </Page>\n  );\n}\n"],"sourceRoot":""}